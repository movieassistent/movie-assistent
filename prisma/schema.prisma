generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserSettings {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  sidebarPosition String   @default("links")
  sidebarCollapsed Boolean @default(false)
  startPage       String   @default("")
  lastVisitedPath String   @default("/dashboard")
  theme           String   @default("dark")
  language        String   @default("de")
  displayMode     String   @default("window")
  updatedAt       DateTime @updatedAt
}

model User {
  id            String        @id @default(cuid())
  name          String?
  password      String
  role          Role         @default(USER)
  emails        Email[]
  settings      UserSettings?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]    @relation("ProjectOwner")
  appIdeas      AppIdea[]
  apiKeys       ApiKey[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Email {
  id        String   @id @default(cuid())
  email     String   @unique
  userId    String
  primary   Boolean  @default(false)
  verified  Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum ProjectStatus {
  IN_PLANNING
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  genre       String
  status      ProjectStatus @default(IN_PLANNING)
  ownerId     String
  owner       User          @relation("ProjectOwner", fields: [ownerId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([ownerId])
}

enum AppIdeaStatus {
  SUBMITTED
  ACCEPTED
  IN_PROGRESS
  DONE
  REJECTED
}

enum Visibility {
  PUBLIC
  PRIVATE
}

model AppIdea {
  id            String        @id @default(cuid())
  title         String
  description   String
  status        AppIdeaStatus @default(SUBMITTED)
  priority      Int          @default(3)
  visibility    Visibility    @default(PUBLIC)
  category      String?
  order         Int          @default(0)
  progress      Int          @default(0)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  implementedAt DateTime?
  createdById   String
  createdBy     User          @relation(fields: [createdById], references: [id])
  aiTasks       String[]      @default([])
  subtasks      Subtask[]

  @@index([createdById])
  @@index([order])
  @@index([visibility])
  @@index([status])
}

model Subtask {
  id            String    @id @default(cuid())
  title         String
  description   String?
  aiPrompt      String?
  completed     Boolean   @default(false)
  order         Int
  isAiGenerated Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  idea          AppIdea   @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  ideaId        String
  parent        Subtask?  @relation("SubtaskToSubtask", fields: [parentId], references: [id], onDelete: Cascade)
  parentId      String?
  children      Subtask[] @relation("SubtaskToSubtask")
  progress      Float     @default(0)

  @@index([ideaId])
  @@index([parentId])
}

model ApiKey {
  id          String    @id @default(cuid())
  provider    String    // e.g., 'openai', 'anthropic'
  key         String
  isActive    Boolean   @default(true)
  balance     Float?    // Optional balance tracking
  lastUsed    DateTime?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([provider])
}
